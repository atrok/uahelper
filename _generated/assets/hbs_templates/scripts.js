define(["handlebars"], function(Handlebars) { return Handlebars.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<script src=\"/assets/js/socket.io.js \"></script>\n<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n<script type=\"text/javascript\" src=\"/assets/js/loading-bar.min.js\"></script>\n<script src=\"/assets/js/docxtemplater-latest.min.js\"></script>\n<script src=\"/assets/js/jszip.min.js\"></script>\n<script src=\"/assets/js/file-saver.min.js\"></script>\n<script src=\"/assets/js/jszip-utils.js\"></script>\n<script src=\"/assets/js/LineReader.js\"></script>\n<script src=\"/assets/js/bootstrap.min.js\"></script>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\"\n    crossorigin=\"anonymous\"></script>\n<!-- script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js\" integrity=\"sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T\" crossorigin=\"anonymous\"></script>\n<!--\n    Mandatory in IE 6, 7, 8 and 9.\n    -->\n<!--[if IE]>\n        <script type=\"text/javascript\" src=\"examples/vendor/jszip-utils-ie.js\"></script>\n    <![endif]-->\n<script>\n\n\n\n    // function to hide and show progress bar and other elements\n    (function ($) {\n        $.fn.invisible = function () {\n            return this.css(\"visibility\", \"hidden\");\n        };\n        $.fn.visible = function () {\n            return this.css(\"visibility\", \"visible\");\n        };\n    })(jQuery);\n\n\n\n\n    var obj = [];\n    var components = {\n        file: {\n            name: '',\n            size: 0,\n            mimeType: ''\n        },\n        components: []\n    };\n\n    var socket = io.connect('/prepareadvisory');\n\n    var bar1 = new ldBar(\"#myItem1\");\n    //var bar2 = document.getElementById('myItem1').ldBar;\n\n    var id;\n\n\n    socket.on('connected', function (data) {\n        console.log(data);\n        id = data.id;\n        socket.emit('tasks', {});\n        socket.emit('get_solutions', {});\n        socket.emit('get_all_configlists', {});\n    });\n\n    socket.on('solutions', function (data) { //populate solutions dropdown list\n\n        if (data) {\n            console.log(data);\n            $(\"#solution\").append(\"<option value=''>Select One …</option>\");\n            Object.keys(data).forEach((key) => {\n                $(\"#solution\").append(\"<option size=25 value='\" + data[key].key + \"'>\" + data[key].key + \"</option>\");\n            });\n        }\n        // attaching event listeners to process generate document requests;\n\n        $(document).ready(function () {\n            solutions = document.getElementById(\"solution\");\n            document.getElementById(\"solution\").addEventListener(\"change\", function () {\n\n                solutions.options[solutions.options.selectedIndex].selected = true;\n                socket.emit('get_components', $(\"#solution option:selected\").attr(\"value\"));\n\n                return false;\n\n            });\n        });\n    })\n\n    socket.on('components', function (data) {\n        console.log(data);\n        if (data) {\n            removeOptions(document.getElementById(\"apptype\"))\n            Object.keys(data).forEach((key) => {\n                $(\"#apptype\").append(\"<option size=25 value='\" + data[key].key[1] + \"'>\" + data[key].key[1] + \"</option>\");\n            });\n\n            // since we add options dynamically we need to set selected flag on change event\n            $(document).ready(function () {\n                applications = document.getElementById(\"apptype\");\n                document.getElementById(\"apptype\").addEventListener(\"change\", function () {\n\n                    applications.options[applications.options.selectedIndex].selected = true;\n                    return false;\n\n                });\n            });\n        }\n    })\n\n    socket.on('all_configlists', function (data) {\n        console.log(data);\n        if (data) {\n            removeOptions(document.getElementById(\"configlist\"));\n            $(\"#configlist\").append(\"<option value=''>Select One …</option>\");\n            Object.keys(data).forEach((key) => {\n                $(\"#configlist\").append(\"<option size=25 id='#\" + data[key].id + \"' value='\" + data[key].id + \"'>\" + data[key].doc.cfglist_name + \"</option>\");\n                //$('#'+data[key].id).data(\"components\",data[key].doc.components);\n            });\n\n            // since we add options dynamically we need to set selected flag on change event\n            $(document).ready(function () {\n                configlist = document.getElementById(\"configlist\");\n                document.getElementById(\"configlist\").addEventListener(\"change\", function () {\n\n                    configlist.options[configlist.options.selectedIndex].selected = true;\n\n                    var doc_id = configlist.options[configlist.options.selectedIndex].value;\n                    submitData('get_configlist', doc_id);\n                })\n                return false;\n\n            });\n        }\n    })\n\n    socket.on('configlist', function (data) {\n        console.log(data);\n        if (data) {\n            //removeOptions(document.getElementById(\"configlist\"))\n\n            // since we add options dynamically we need to set selected flag on change event\n            var components = data.components;\n\n            configlist_detach();\n\n            add_config_list_item(components);\n\n            // initialize config list buttons\n            $(document).ready(function () {\n                init_config_lists_caption(data);\n                init_config_lists();\n\n                // TODO:\n                // add listeners for editable cells change events\n                editable_setlisteners()\n            });\n\n            $(\"#config_list\").visible();\n        }\n    })\n\n    function editable_setlisteners() {\n        $('body').on('focus', '[contenteditable]', function () {\n            var $this = $(this);\n            $this.data('before', $this.html());\n            return $this;\n        }).on('blur keyup paste input', '[contenteditable]', function () {\n            var $this = $(this);\n            if ($this.data('before') !== $this.html()) {\n                $this.data('before', $this.html());\n                $this.trigger('cl_editable_change');\n            }\n            return $this;\n        }).on('cl_editable_change', function () {\n            var $this = $(this)\n            console.log($this + \" triggered cl_editable_change\")\n            button_enable($(\"#update-btn\"))\n        });\n    }\n\n    function add_config_list_item(arr) {\n        arr.forEach(function (item, i) {\n            var header = []\n\n            var head = $(\"#config_list_t\").find('th:not(:empty)')\n            if (head.length == 0) {\n                Object.keys(item).forEach((key) => {\n                    header.push(key);\n                });\n\n                add_header_to_configlist(header);\n                console.log(\"config list header is created\");\n\n            }\n            var row = []\n            Object.values(item).forEach((value) => {\n                row.push(value);\n            })\n            add_row_to_configlist(row);\n            console.log(\"config list rows are added\");\n        })\n    }\n\n    socket.on('progress', function (data) {\n        console.log(data.percents);\n        bar1.set(data.percents);\n    })\n\n    socket.on('result', function (data) {\n        console.log(data);\n        $(\"#generate\").visible();\n        $(\"#div_result #resultsTable\").empty();\n\n        // remove all hidden inputs\n        var fields = $(\"#form_generate :input\").serializeArray();\n        $.each(fields, function (i, field) {\n            $(\"input[name='\" + field.value + \"']\").remove();\n        });\n\n        // clearing the cache\n        obj = [];\n\n        // saving object for postprocesing in cache\n        if (data.parsed_obj) {\n            obj[data._id] = data.parsed_obj;\n            $(\"#generate\").append(\"<input type='hidden' name='\" + data._id + \"' value='\" + data._id + \"' />\");\n        }\n\n        Object.keys(data).forEach((key) => {\n            if (key === 'file' || key === 'error' || key == 'table') // \n                $(\"#div_result #result\").append(data[key]);\n        })\n\n\n\n        $('.tableresultheader').click(function () {\n            $header = $(this);\n            $content = $header.next();\n            $content.slideToggle(500, function () {\n                $header.text(function () {\n                    return $content.is(':visible') ? 'Collapse' : 'Expand';\n                });\n            });\n        });\n\n        // attaching event listeners to process generate document requests;\n\n        $(document).ready(function () {\n            document.getElementById(\"docx\").addEventListener(\"click\", function () {\n\n                var values = {};\n                var fields = $(\"#form_generate :input\").serializeArray();\n                $.each(fields, function (i, field) {\n                    values = obj[field.value];\n                });\n\n                var generator = new Generator();\n\n                generator.generateDocx(\"/assets/js/input.docx\", values);\n\n                return false;\n\n            });\n        });\n\n\n    })\n\n    socket.on('console', function (data) {\n        console.log(data);\n        //$(\"#div_result\").empty();\n        Object.keys(data).forEach((key) => { $(\"#div_result #console\").append(data[key]); })\n\n\n    })\n\n    socket.on('errors', function (data) {\n        console.log(data);\n        //$(\"#div_result\").empty();\n        lotsoferrors(data);\n\n\n    })\n\n    socket.on('done', function (data) {\n        done();\n    })\n\n    socket.on('validation', function (data) {\n        console.log(data);\n        $(':submit').attr('disabled', 'disabled');\n        if (data.submitted) {\n            $(\"#div_result #console\").append(data.reason);\n        } else {\n            lotsoferrors(data.reason)\n            done();\n        }\n    })\n\n    socket.on('tasks', function (data) {\n        console.log('Got list of tasks');\n        if (data instanceof Array) {\n            data.forEach((item) => {\n                $('#tasks').append(\n                    '<tr id=\"' + item.id + '\">'\n                    + '<td><input type=\"checkbox\" id=\"' + item.id + '\" /></td>'\n                    + '<td>' + item.time.toString() + '</td>'\n                    + '<td>' + item.input.toString() + '</td>'\n                    + '<td>' + item.link.toString() + '</td>'\n                    + '</tr>'\n                )\n            })\n            $(document).ready(function () {\n                $(\".getresult\").click(function () {\n                    var id = this.id;\n                    submitData('getresults', { 'id': id })\n                });\n            });\n        }\n    })\n\n    socket.on('deleted', function (data) {\n        console.log('Record deleted: ', data.id);\n        $('tr#' + data.id).remove();\n    })\n\n    socket.on('saved_configlist', function (data) {\n        console.log('Configlist saved: ', data);\n        $(\"#configlist\").append(\"<option size=25 value='\" + data._id + \"'>\" + data.cfglist_name + \"</option>\");\n        $(document).ready(function () {\n            init_config_lists_caption(data);\n            button_enable($(\"delete-btn\"));\n        })\n    })\n\n    socket.on('updated_configlist', function (data) {\n        console.log('Configlist updated: ', data);\n\n        $(document).ready(function () {\n            $(\"#configlist_updated\").text(\"\");\n            $(\"#configlist_updated\").append(data.updated);\n        })\n    })\n\n    socket.on('deleted_configlist', function (data) {\n        console.log('Configlist deleted: ', data);\n        $(\"#configlist option[value='\" + data.id + \"']\").remove();\n        $(document).ready(function () {\n            configlist_detach();\n            init_config_lists_clear_text();\n        })\n    })\n\n    $(\"#form_dbs\").submit(function () {\n        try {\n            var args = {};\n            var errors = []\n            args.dbtype = $(\"select option:selected\").attr(\"value\");\n\n            args.host = (checkField($(\"#host\").val(), 100)) ? $(\"#host\").val() : errors.push('Host can\\'t be longer than 100');\n            args.dbname = (checkField($(\"#dbname\").val(), 100)) ? $(\"#dbname\").val() : errors.push('DB name can\\t be longer than 100');\n            args.user = (checkField($(\"#user\").val(), 100)) ? $(\"#user\").val() : errors.push('User can\\'t be longer than 100');\n            args.pass = (checkField($(\"#pass\").val(), 25)) ? $(\"#pass\").val() : errors.push('Password can\\'t be longer than 25');\n            args.genfile = $('#genfile_d').is(':checked') ? true : false;\n\n            var res = {};\n            res.form = 'form_dbs';\n            res.args = args;\n            if (!lotsoferrors(errors))\n                submitData('my other event', res);\n\n\n            //alert(args);;\n\n        } catch (e) {\n            console.log(e.stack);\n        } finally {\n            return false; // to avoid page reload\n        } // to avoid page reload\n\n    })\n\n    function get_selected_components() {\n        var result = {\n            args: {}, errors: []\n        };\n\n        result.args.solution = $(\"#solution option:selected\").attr(\"value\");\n        result.args.apptype = $(\"#apptype option:selected\").attr(\"value\");\n        result.args.ostype = $(\"#ostype option:selected\").attr(\"value\");\n        result.args.release = (checkField($(\"#release\").val(), 10)) ? $(\"#release\").val() : result.errors.push('Release can\\'t be longer than 10');\n        result.args.genfile = $('#genfile_a').is(':checked') ? true : false;\n        return result;\n    }\n\n    $(\"#form_comp\").submit(function () {\n        try {\n\n            var component = get_selected_components();\n\n            var res = {}\n            res.form = 'form_comp';\n            res.args = component.args;\n            if (!lotsoferrors(component.errors)) {\n                submitData('search', res);\n\n            }\n\n        } catch (e) {\n            console.log(e.stack);\n        } finally {\n            return false; // to avoid page reload\n        } // to avoid page reload\n\n    })\n\n    $(\"#form_tasks\").submit(function () {\n        try {\n            var args = {};\n            var errors = []\n            args = checkedValues(\"#form_tasks input:checkbox:checked\");\n\n\n\n            submitData('deleteresults', args);\n            //alert(args);;\n\n        } catch (e) {\n            console.log(e.stack);\n        } finally {\n            return false; // to avoid page reload\n        } // to avoid page reload\n\n    })\n\n    $(\"#form_csv\").submit(submit_csv())\n\n    function submit_csv() {\n        try {\n            var errors = [];\n            var res = {};\n            var genfile = $('#genfile_c').is(':checked') ? true : false;\n            var create_config_list = $('#hasHeader').is(':checked') ? true : false;\n\n            if (components.length == 0) {\n                errors.push('components list is empty');\n            }\n\n\n            if (!lotsoferrors(errors)) {\n                res.form = \"form_csv\";\n                res.args = components.file;\n                res.components = components.components;\n                res.genfile = genfile;\n\n                submitData('components', res);\n\n            }\n        } catch (e) {\n            console.log(e.stack);\n        } finally {\n            return false;\n        }\n    }\n\n    $(\"#form_admin\").submit(function () {\n        try {\n            var args = {};\n            args.databases = $(\"#databases option:selected\").attr(\"value\");\n\n            submitData('recreate_view', args);\n            //alert(args);;\n\n        } catch (e) {\n            console.log(e.stack);\n        } finally {\n            return false; // to avoid page reload\n        } // to avoid page reload\n\n    })\n\n    $(\"#form_generate\").submit(function () {\n        try {\n\n        } catch (e) {\n            console.log(e.stack);\n        } finally {\n            return false; // to avoid page reload\n        } // to avoid page reload\n    })\n\n    $(\"#addto-cs-event\").click(function () {\n\n        var result = get_selected_components();\n\n        var data = [];//get_table_data();\n\n        if (!lotsoferrors(result.errors)) {\n            data.push(result.args);\n\n            add_config_list_item(data)\n\n            $(document).ready(function () {\n                init_config_lists();\n                button_disable($(\"#delete-btn\"), {\n                    eval: function () {\n                        return ($(\"#configlist_docid\").text().length > 0) ? false : true;\n                    }\n                });\n\n                button_enable($(\"#update-btn\"), {\n                    eval: function () {\n                        return ($(\"#configlist_docid\").text().length > 0) ? true : false;\n                    }\n\n                });\n                editable_setlisteners()\n\n\n            });\n\n            $(\"#config_list\").visible();\n\n        }\n    })\n\n    function done() {\n        $('.active_submitter').removeAttr('disabled');\n        $(':submit').removeClass('active_submitter');\n        $('div #myItem1').invisible();\n    }\n\n    function submitData(channel, data) {\n        console.log(\"Sending data to /\" + channel + \", \" + data);\n        socket.emit(channel, data);\n        $('div #myItem1').visible();\n    }\n\n\n    // function to check length of field content. It compares to desired max length of string and min length of string.\n    // in case min length is not defind it compares against 0;\n\n    var checkField = function (text, maxcondition, mincondition) {\n        if (!mincondition) {\n            var mincondition = 1;\n        }\n\n        return (text.length > maxcondition || text.length < mincondition) ? false : true;\n\n    }\n\n    var lotsoferrors = function (errors) {\n        var err;\n        if (errors instanceof Array) {\n            err = errors;\n        } else {// object kv pairs\n            err = [];\n            Object.keys(errors).forEach((k) => {\n\n                err.push('<span class=\"error\">' + k + ':</span> ' + errors[k]);\n            })\n\n        }\n        if (err.length > 0) {\n            $(\"#form_errors\").empty();\n\n            $(\"#form_errors\").append('<div id=\"errors\"><h3>Error!</h3><span onclick=\"this.parentElement.style.display=\\'none\\'\"  class=\"w3-button w3-display-topright\">X</span></div>');\n            var s;\n            err.forEach((val) => { $(\"#errors\").append(val + '<br/>') });\n            return true;\n\n        } else {\n            $(\"#errors\").remove();\n            return false;\n        }\n    }\n\n    var checkedValues = function (name) {\n        return $(name).map(function () {\n            return this.id;\n        }).get();\n    }\n\n    function openTab(evt, tabName) {\n        var i;\n        var x = document.getElementsByClassName(\"tab\");\n        for (i = 0; i < x.length; i++) {\n            x[i].style.display = \"none\";\n        }\n\n        tablinks = document.getElementsByClassName(\"tablink\");\n        for (i = 0; i < x.length; i++) {\n            tablinks[i].className = tablinks[i].className.replace(\" w3-red\", \"\");\n        }\n        document.getElementById(tabName).style.display = \"block\";\n        evt.currentTarget.className += \" w3-red\";\n    }\n\n    /* Generate DOCX from template */\n\n    var Generator = function () { };\n\n    Generator.prototype.generateDocx = function (url, obj) {\n        this.loadFile(url, obj, this.createDocx)\n    }\n\n    Generator.prototype.loadFile = function (url, obj, callback) {\n\n        var self = this;\n\n\n        self._obj = obj;\n        self.url = url;\n\n        JSZipUtils.getBinaryContent(url, function (error, content) {\n            if (error) { throw error };\n            var zip = new JSZip(content);\n            var doc = new Docxtemplater().loadZip(zip)\n            doc.setData(self._obj);\n\n            try {\n                // render the document (replace all occurences of {first_name} by John, {last_name} by Doe, ...)\n                doc.render()\n            }\n            catch (error) {\n                var e = {\n                    message: error.message,\n                    name: error.name,\n                    stack: error.stack,\n                    properties: error.properties,\n                }\n                console.log(JSON.stringify({ error: e }));\n                // The error thrown here contains additional information when logged with JSON.stringify (it contains a property object).\n                throw error;\n            }\n\n            var out = doc.getZip().generate({\n                type: \"blob\",\n                mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n            }) //Output the document using Data-URI\n            saveAs(out, \"output.docx\")\n        });\n    }\n\n\n    Generator.prototype.createDocx = function (error, content) {\n        if (error) { throw error };\n        var zip = new JSZip(content);\n        var doc = new Docxtemplater().loadZip(zip)\n        doc.setData(this._obj);\n\n        try {\n            // render the document (replace all occurences of {first_name} by John, {last_name} by Doe, ...)\n            doc.render()\n        }\n        catch (error) {\n            var e = {\n                message: error.message,\n                name: error.name,\n                stack: error.stack,\n                properties: error.properties,\n            }\n            console.log(JSON.stringify({ error: e }));\n            // The error thrown here contains additional information when logged with JSON.stringify (it contains a property object).\n            throw error;\n        }\n\n        var out = doc.getZip().generate({\n            type: \"blob\",\n            mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        }) //Output the document using Data-URI\n        saveAs(out, \"output.docx\")\n    }\n\n    function removeOptions(selectbox) {\n        var i;\n        for (i = selectbox.options.length - 1; i >= 0; i--) {\n            selectbox.remove(i);\n        }\n    }\n\n    function handleFiles(event) {\n        var file = event.target.files[0];\n        components.file.name = file.name;\n        components.file.size = file.size;\n        components.file.mimeType = file.mimeType;\n        components.components = [];\n\n        var reader = new LineReader();\n\n        var hasHeader = $('#hasHeader').is(':checked') ? true : false;\n        var header = [];\n\n\n        reader.on('line', function (line, next) {\n            // Do something with line....\n\n            if (header.length == 0) {\n                header = line.split(',');\n                add_header_to_configlist(header);\n            } else {\n\n                var array = line.split(',');\n\n                add_row_to_configlist(array);\n\n                var obj = {};\n                for (var i = 0; i < array.length; i++) {\n                    obj[header[i]] = \"\" + array[i] + \"\";\n                }\n                //components.components.push(obj);\n\n            }\n\n\n            next(); // Call next to resume...\n        });\n\n        reader.on('end', function (evt) {\n            console.log(components);\n\n            // initialize config list buttons\n            $(\"#configlist_name\").text('');\n            $(\"#configlist_docid\").text('');\n            $(\"#configlist_revid\").text('');\n            $(\"#configlist_time\").text('');\n            $(\"#configlist_updated\").text('');\n\n            $(document).ready(function () {\n                init_config_lists();\n                button_disable($(\"#delete-btn\"));\n                editable_setlisteners()\n\n\n            });\n\n            $(\"#config_list\").visible();\n        })\n\n        reader.read(file);\n    }\n\n    function add_row_to_configlist(data) {\n        console.log('Got item for config list');\n        if (data instanceof Array) {\n            var row = '';\n            data.forEach((item) => {\n\n                row = row + '<td contenteditable=\"true\">' + item + '</td>';\n\n            })\n            $('#config_list_t').append('<tr>' + row\n                + '<td><span class=\"table-remove glyphicon glyphicon-remove\"></span></td>'\n                + '<td><span class=\"table-up glyphicon glyphicon-arrow-up\"></span>'\n                + '<span class=\"table-down glyphicon glyphicon-arrow-down\"></span>'\n                + '</td></tr>');\n\n\n        }\n    }\n\n    function configlist_detach() {\n        $('#config_list').detach();\n        $('#export_div').detach();\n        console.log(\"export_div detached\");\n    }\n    function add_header_to_configlist(data) {\n        console.log('Got header item for config list');\n\n        configlist_detach();\n\n        $('#configlist_container').append(\n            '<div id=\"config_list\" class=\"table-editable\" style=\"visibility: hidden\">'\n            + '<span class=\"table-add glyphicon glyphicon-plus\"></span>'\n            + '<table id=\"config_list_t\" class=\"table\">'\n            + '<tr id=\"config_list_t_header\">'\n            + '</tr>'\n            + '<!-- This is our clonable table line -->'\n            + '</table>'\n            + '</div>'\n        );\n        if (data instanceof Array) {\n            var row = '';\n            data.forEach((item) => {\n\n                row = row + '<th>' + item + '</th>';\n\n            })\n            $('#config_list_t_header').append(row + '<th></th><th></th>');\n\n            $(\"#configlist_container\").append('<div id=\"export_div\">'\n                + '<button id=\"run-btn\" class=\"btn btn-primary\">Run</button>'\n                + '<button id=\"save-btn\" class=\"btn btn-primary\">Save as</button>'\n                + '<button id=\"update-btn\" class=\"btn btn-primary\" disabled=\"true\">Update</button>'\n                + '<button id=\"delete-btn\" class=\"btn btn-primary\">Delete</button>'\n                + '<button id=\"reset-btn\" class=\"btn btn-primary\">Reset</button><p id=\"export\"></p></div>');\n\n            /*\n            $(document).ready(function () {\n               init_config_lists();\n            });\n            */\n        }\n    }\n\n    // Configuration lists table management script \n\n    function init_config_lists_clear_text() {\n\n        $(\"#configlist_name\").text('');\n        $(\"#configlist_docid\").text('');\n        $(\"#configlist_revid\").text('');\n        $(\"#configlist_time\").text('');\n        $(\"#configlist_updated\").text('');\n    }\n\n\n    function init_config_lists_caption(data) {\n\n        init_config_lists_clear_text();\n\n        $(\"#configlist_name\").append(data.cfglist_name);\n        $(\"#configlist_docid\").append(data._id);\n        $(\"#configlist_revid\").append(data._rev);\n        $(\"#configlist_time\").append(data.time);\n        $(\"#configlist_updated\").append(data.updated);\n    }\n\n    function button_enable(elem, condition) {\n        console.log(elem + \" is enabled\")\n        if (condition) {\n            if (condition.eval()) {\n                elem.prop(\"disabled\", false)\n            }\n            return\n        }\n        elem.prop(\"disabled\", false);\n    }\n\n    // condition is an object where eval is a user defined function to evaluate true/false condition to disable an object\n\n    function button_disable(elem, condition) {\n        console.log(elem + \" is disabled\")\n        if (condition) {\n            if (condition.eval()) {\n                elem.prop(\"disabled\", true)\n            }\n            return\n        }\n\n        elem.prop(\"disabled\", true)\n    }\n\n    function get_table_data() {\n        var $TABLE = $('#config_list_t');\n\n        var $rows = $TABLE.find('tr:not(:hidden)');\n        var headers = [];\n        var data = [];\n\n        // Get the headers (add special header logic here)\n\n        if ($rows.length > 1) {\n            $($rows.shift()).find('th:not(:empty)').each(function () {\n                headers.push($(this).text().toUpperCase());\n            });\n\n            // Turn all existing rows into a loopable array\n            $rows.each(function () {\n                var $td = $(this).find('td');\n                var h = {};\n\n                // Use the headers from earlier to name our hash keys\n                headers.forEach(function (header, i) {\n                    h[header] = $td.eq(i).text();\n                });\n\n                data.push(h);\n            });\n        }\n\n        return data;\n\n    }\n\n    function init_config_lists() {\n        var $TABLE = $('#config_list_t');\n        var $BTN = $('#run-btn');\n        var $BTN_SAVE = $('#save-btn');\n        var $BTN_UPDATE = $('#update-btn');\n        var $BTN_DELETE = $('#delete-btn');\n        var $BTN_RESET = $('#reset-btn');\n        var $EXPORT = $('#export');\n\n        $('.table-add').click(function () {\n            var $clone = $TABLE.find('tr.hide').clone(true).removeClass('hide table-line');\n            $TABLE.find('table').append($clone);\n            button_enable($BTN_UPDATE);\n        });\n\n        $('.table-remove').click(function () {\n            $(this).parents('tr').detach();\n            button_enable($BTN_UPDATE);\n        });\n\n        $('.table-up').click(function () {\n            var $row = $(this).parents('tr');\n            if ($row.index() === 1) return; // Don't go above the header\n            $row.prev().before($row.get(0));\n            button_enable($BTN_UPDATE);\n        });\n\n        $('.table-down').click(function () {\n            var $row = $(this).parents('tr');\n            $row.next().after($row.get(0));\n            button_enable($BTN_UPDATE);\n        });\n\n        // A few jQuery helpers for exporting only\n        jQuery.fn.pop = [].pop;\n        jQuery.fn.shift = [].shift;\n\n\n\n        $BTN.click(function () {\n\n            console.log('Configuration list is to be sent to backend for evaluation')\n\n            var data = get_table_data();\n\n\n            // Output the result\n            console.log(data);\n            components.components = data;\n            submit_csv();\n\n        });\n\n        $BTN_SAVE.click(function () {\n\n            console.log('Saving config list');\n            var data = get_table_data();\n            $('#configlist_modal').data(\"components\", data)\n            $('#configlist_modal').modal('show');\n\n        })\n\n        $BTN_UPDATE.click(function () {\n\n            var cl = {\n                cfglist_name: $(\"#configlist_name\").text(),\n                _id: $(\"#configlist_docid\").text(),\n                _rev: $(\"#configlist_revid\").text(),\n                time: $(\"#configlist_time\").text()\n            }\n\n            console.log('Updating config list: ' + cl.cfglist_name + ' _id:' + cl._id + ' _rev: ' + cl._rev);\n            console.log('Updating config list');\n            cl.components = get_table_data();\n\n            $('#configlist_update_modal').data(\"document\", cl)\n\n            $('#configlist_update_modal').modal('show');\n\n        })\n\n        $BTN_DELETE.click(function () {\n\n            var cl = {\n                name: $(\"#configlist_name\"),\n                id: $(\"#configlist_docid\")\n            }\n\n            cl.name;\n\n            console.log('Deleting config list: ' + cl.name.text() + ' _id:' + cl.id.text());\n\n            $('#configlist_delete_modal').data(\"id\", cl.id.text())\n            $('#configlist_delete_modal').modal('show');\n\n        })\n\n        $BTN_RESET.click(function () {\n            if (!$(\"#update-btn\").prop(\"disabled\")) {\n                $('#configlist_forced_update_modal').modal('show');\n\n            } else {\n                $(\"#reset-event\").click()\n            }\n        })\n    }\n\n    // Handling of config list modal  buttons\n    $('#save-event').on(\n        'click',\n        function (evt) {\n            console.log('Saving of config list has been triggered');\n            var errors = [];\n            var args = {};\n\n            var modal_data = $('#configlist_modal').data();\n            var cfglist_name = $(\"#configlist-name\").val();\n\n            args.cfglist_name = (checkField($(\"#configlist-name\").val(), 20)) ? $(\"#configlist-name\").val() : errors.push('Configuration list name is too long, can\\'t be longer than 20');\n            args.components = modal_data.components;\n\n            if (!lotsoferrors(errors)) {\n\n                submitData('save_configlist', args);\n                $('#save-btn').addClass(\"active_submitter\");\n            }\n\n            $('#configlist_modal').modal('hide');\n\n\n        }\n    );\n\n    $(\"#update-event\").on(\n        'click',\n        function (evt) {\n            console.log('Update of config list has been triggered');\n\n            var data = $('#configlist_update_modal').data();\n\n            submitData('update_configlist', data.document);\n            $('#configlist_update_modal').modal('hide');\n            $('#update-btn').addClass(\"active_submitter\");\n        }\n    )\n\n    $(\"#delete-event\").on(\n        'click',\n        function (evt) {\n            console.log('Deleting of config list has been triggered');\n\n            var id = $('#configlist_delete_modal').data('id');\n            submitData('delete_configlist', id);\n            $('#configlist_delete_modal').modal('hide');\n            $('#delete-btn').addClass(\"active_submitter\");\n        }\n    )\n\n    $(\"#forced-update-event\").on('click',\n        function (evt) {\n            var queue = new function_pipeline();\n            console.log('Forced update of config list has been triggered');\n            $('#configlist_forced_update_modal').modal('hide');\n            if ($(\"#configlist_docid\").text.length > 0) {\n                queue.push(function(){$('#save-btn').click()});\n            } else {\n                queue.push(function(){$('#update-btn').click()});\n            }\n            queue.push(function(){$('#reset-event').click()});\n\n            queue.execute();\n\n\n\n        })\n    $(\"#reset-event\").on('click',\n        function (evt) {\n            init_config_lists_clear_text();\n            configlist_detach();\n        })\n    // Scripts to handle TABs\n\n    var function_pipeline = function () {\n        this.queue = []\n    }\n\n    function_pipeline.prototype.push = function (arg) {\n        this.queue.push(arg)\n    }\n\n    function_pipeline.prototype.execute = function () {\n        while (this.queue.length) {\n            this.queue.shift().call();\n        }\n    }\n\n\n    $('.nav-tabs a').click(function (e) {\n        e.preventDefault();\n        $(this).tab('show');\n    });\n\n</script>";
},"useData":true}); });