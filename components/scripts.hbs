<script src="/assets/js/socket.io.js "></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<script type="text/javascript" src="/assets/js/loading-bar.min.js"></script>
<script src="/assets/js/docxtemplater-latest.min.js"></script>
<script src="/assets/js/jszip.min.js"></script>
<script src="/assets/js/file-saver.min.js"></script>
<script src="/assets/js/jszip-utils.js"></script>
<!--
    Mandatory in IE 6, 7, 8 and 9.
    -->
<!--[if IE]>
        <script type="text/javascript" src="examples/vendor/jszip-utils-ie.js"></script>
    <![endif]-->
<script>



    // function to hide and show progress bar and other elements
    (function ($) {
        $.fn.invisible = function () {
            return this.css("visibility", "hidden");
        };
        $.fn.visible = function () {
            return this.css("visibility", "visible");
        };
    })(jQuery);




    var obj = [];

    var socket = io.connect('/prepareadvisory');

    var bar1 = new ldBar("#myItem1");
    //var bar2 = document.getElementById('myItem1').ldBar;

    var id;
    socket.on('connected', function (data) {
        console.log(data);
        id = data.id;
        socket.emit('tasks', {});
        socket.emit('get_solutions', {});
    });

    socket.on('solutions', function (data) { //populate solutions dropdown list

        if (data) {
            console.log(data);
            Object.keys(data).forEach((key) => {
                $("#solution").append("<option size=25 value='" + data[key].key + "'>" + data[key].key + "</option>");
            });
        }
        // attaching event listeners to process generate document requests;

        $(document).ready(function () {
            solutions = document.getElementById("solution");
            document.getElementById("solution").addEventListener("change", function () {

                solutions.options[solutions.options.selectedIndex].selected = true;
                socket.emit('get_components', $("#solution option:selected").attr("value"));

                return false;

            });
        });
    })

    socket.on('components', function (data) {
        console.log(data);
        if (data) {
            removeOptions(document.getElementById("apptype"))
            Object.keys(data).forEach((key) => {
                $("#apptype").append("<option size=25 value='" + data[key].key[1] + "'>" + data[key].key[1] + "</option>");
            });

            // since we add options dynamically we need to set selected flag on change event
            $(document).ready(function () {
            applications = document.getElementById("apptype");
            document.getElementById("apptype").addEventListener("change", function () {

                applications.options[applications.options.selectedIndex].selected = true;
                return false;

            });
        });
        }
    })

    socket.on('progress', function (data) {
        console.log(data.percents);
        bar1.set(data.percents);
    })

    socket.on('result', function (data) {
        console.log(data);
        $("#generate").visible();
        $("#div_result #resultsTable").empty();

        // remove all hidden inputs
        var fields = $("#form_generate :input").serializeArray();
        $.each(fields, function (i, field) {
            $("input[name='" + field.value + "']").remove();
        });

        // clearing the cache
        obj = [];

        // saving object for postprocesing in cache
        if (data.parsed_obj) {
            obj[data._id] = data.parsed_obj;
            $("#generate").append("<input type='hidden' name='" + data._id + "' value='" + data._id + "' />");
        }

        Object.keys(data).forEach((key) => {
            if (key === 'file' || key === 'error' || key == 'table') // 
                $("#div_result #result").append(data[key]);
        })



        $('.tableresultheader').click(function () {
            $header = $(this);
            $content = $header.next();
            $content.slideToggle(500, function () {
                $header.text(function () {
                    return $content.is(':visible') ? 'Collapse' : 'Expand';
                });
            });
        });

        // attaching event listeners to process generate document requests;

        $(document).ready(function () {
            document.getElementById("docx").addEventListener("click", function () {

                var values = {};
                var fields = $("#form_generate :input").serializeArray();
                $.each(fields, function (i, field) {
                    values = obj[field.value];
                });

                var generator = new Generator();

                generator.generateDocx("/assets/js/input.docx", values);

                return false;

            });
        });


    })

    socket.on('console', function (data) {
        console.log(data);
        //$("#div_result").empty();
        Object.keys(data).forEach((key) => { $("#div_result #console").append(data[key]); })


    })

    socket.on('errors', function (data) {
        console.log(data);
        //$("#div_result").empty();
        lotsoferrors(data);


    })

    socket.on('done', function (data) {
        done();
    })

    socket.on('validation', function (data) {
        console.log(data);
        $(':submit').attr('disabled', 'disabled');
        if (data.submitted) {
            $("#div_result #console").append(data.reason);
        } else {
            lotsoferrors(data.reason)
            done();
        }
    })

    socket.on('tasks', function (data) {
        console.log('Got list of tasks');
        if (data instanceof Array) {
            data.forEach((item) => {
                $('#tasks').append(
                    '<tr id="' + item.id + '">'
                    + '<td><input type="checkbox" id="' + item.id + '" /></td>'
                    + '<td>' + item.time.toString() + '</td>'
                    + '<td>' + item.input.toString() + '</td>'
                    + '<td>' + item.link.toString() + '</td>'
                    + '</tr>'
                )
            })
            $(document).ready(function () {
                $(".getresult").click(function () {
                    var id = this.id;
                    submitData('getresults', { 'id': id })
                });
            });
        }
    })

    socket.on('deleted', function (data) {
        console.log('Record deleted: ', data.id);
        $('tr#' + data.id).remove();
    })

    $("#form_dbs").submit(function () {
        try {
            var args = {};
            var errors = []
            args.dbtype = $("select option:selected").attr("value");

            args.host = (checkField($("#host").val(), 100)) ? $("#host").val() : errors.push('Host can\'t be longer than 100');
            args.dbname = (checkField($("#dbname").val(), 100)) ? $("#dbname").val() : errors.push('DB name can\t be longer than 100');
            args.user = (checkField($("#user").val(), 100)) ? $("#user").val() : errors.push('User can\'t be longer than 100');
            args.pass = (checkField($("#pass").val(), 25)) ? $("#pass").val() : errors.push('Password can\'t be longer than 25');
            args.genfile = $('#genfile_d').is(':checked') ? true : false;

            var res = {};
            res.form = 'form_dbs';
            res.args = args;
            if (!lotsoferrors(errors))
                submitData('my other event', res);


            //alert(args);;

        } catch (e) {
            console.log(e.stack);
        } finally {
            return false; // to avoid page reload
        } // to avoid page reload

    })
    $("#form_comp").submit(function () {
        try {
            var args = {};
            var errors = []
            args.apptype = $("#apptype option:selected").attr("value");
            args.ostype = $("#ostype option:selected").attr("value");
            args.genfile = $('#genfile_a').is(':checked') ? true : false;

            args.release = (checkField($("#release").val(), 10)) ? $("#release").val() : errors.push('Release can\'t be longer than 10');
            var res = {}
            res.form = 'form_comp';
            res.args = args;
            if (!lotsoferrors(errors)) {
                submitData('search', res);

            }

        } catch (e) {
            console.log(e.stack);
        } finally {
            return false; // to avoid page reload
        } // to avoid page reload

    })

    $("#form_tasks").submit(function () {
        try {
            var args = {};
            var errors = []
            args = checkedValues("#form_tasks input:checkbox:checked");



            submitData('deleteresults', args);
            //alert(args);;

        } catch (e) {
            console.log(e.stack);
        } finally {
            return false; // to avoid page reload
        } // to avoid page reload

    })

    $("#form_admin").submit(function () {
        try {
            var args = {};
            args.databases = $("#databases option:selected").attr("value");

            submitData('recreate_view', args);
            //alert(args);;

        } catch (e) {
            console.log(e.stack);
        } finally {
            return false; // to avoid page reload
        } // to avoid page reload

    })

    $("#form_generate").submit(function () {
        try {

        } catch (e) {
            console.log(e.stack);
        } finally {
            return false; // to avoid page reload
        } // to avoid page reload
    })

    function done() {
        $(':submit').removeAttr('disabled');
        $('div #myItem1').invisible();
    }

    function submitData(channel, data) {
        socket.emit(channel, data);
        $('div #myItem1').visible();
    }

    var checkField = function (text, condition) {
        return (text.length > condition) ? false : true;
    }

    var lotsoferrors = function (errors) {
        var err;
        if (errors instanceof Array) {
            err = errors;
        } else {// object kv pairs
            err = [];
            Object.keys(errors).forEach((k) => {

                err.push('<span class="error">' + k + ':</span> ' + errors[k]);
            })

        }
        if (err.length > 0) {
            $("#form_errors").empty();

            $("#form_errors").append('<div id="errors"><h3>Error!</h3><span onclick="this.parentElement.style.display=\'none\'"  class="w3-button w3-display-topright">X</span></div>');
            var s;
            err.forEach((val) => { $("#errors").append(val + '<br/>') });
            return true;

        } else {
            $("#errors").remove();
            return false;
        }
    }

    var checkedValues = function (name) {
        return $(name).map(function () {
            return this.id;
        }).get();
    }

    function openTab(evt, tabName) {
        var i;
        var x = document.getElementsByClassName("tab");
        for (i = 0; i < x.length; i++) {
            x[i].style.display = "none";
        }

        tablinks = document.getElementsByClassName("tablink");
        for (i = 0; i < x.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" w3-red", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " w3-red";
    }

    /* Generate DOCX from template */

    var Generator = function () { };

    Generator.prototype.generateDocx = function (url, obj) {
        this.loadFile(url, obj, this.createDocx)
    }

    Generator.prototype.loadFile = function (url, obj, callback) {

        var self = this;


        self._obj = obj;
        self.url = url;

        JSZipUtils.getBinaryContent(url, function (error, content) {
            if (error) { throw error };
            var zip = new JSZip(content);
            var doc = new Docxtemplater().loadZip(zip)
            doc.setData(self._obj);

            try {
                // render the document (replace all occurences of {first_name} by John, {last_name} by Doe, ...)
                doc.render()
            }
            catch (error) {
                var e = {
                    message: error.message,
                    name: error.name,
                    stack: error.stack,
                    properties: error.properties,
                }
                console.log(JSON.stringify({ error: e }));
                // The error thrown here contains additional information when logged with JSON.stringify (it contains a property object).
                throw error;
            }

            var out = doc.getZip().generate({
                type: "blob",
                mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            }) //Output the document using Data-URI
            saveAs(out, "output.docx")
        });
    }


    Generator.prototype.createDocx = function (error, content) {
        if (error) { throw error };
        var zip = new JSZip(content);
        var doc = new Docxtemplater().loadZip(zip)
        doc.setData(this._obj);

        try {
            // render the document (replace all occurences of {first_name} by John, {last_name} by Doe, ...)
            doc.render()
        }
        catch (error) {
            var e = {
                message: error.message,
                name: error.name,
                stack: error.stack,
                properties: error.properties,
            }
            console.log(JSON.stringify({ error: e }));
            // The error thrown here contains additional information when logged with JSON.stringify (it contains a property object).
            throw error;
        }

        var out = doc.getZip().generate({
            type: "blob",
            mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        }) //Output the document using Data-URI
        saveAs(out, "output.docx")
    }

    function removeOptions(selectbox) {
        var i;
        for (i = selectbox.options.length - 1; i >= 0; i--) {
            selectbox.remove(i);
        }
    }

</script>