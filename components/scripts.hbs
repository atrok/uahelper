<script src="/assets/js/socket.io.js "></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<script type="text/javascript" src="/assets/js/loading-bar.min.js"></script>
<script src="/assets/js/docxtemplater-latest.min.js"></script>
<script src="/assets/js/jszip.min.js"></script>
<script src="/assets/js/file-saver.min.js"></script>
<script src="/assets/js/jszip-utils.js"></script>
<script src="/assets/js/LineReader.js"></script>
<script src="/assets/js/bootstrap.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49"
    crossorigin="anonymous"></script>
<!-- script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T" crossorigin="anonymous"></script>
<!--
    Mandatory in IE 6, 7, 8 and 9.
    -->
<!--[if IE]>
        <script type="text/javascript" src="examples/vendor/jszip-utils-ie.js"></script>
    <![endif]-->
<script>



    // function to hide and show progress bar and other elements
    (function ($) {
        $.fn.invisible = function () {
            return this.css("visibility", "hidden");
        };
        $.fn.visible = function () {
            return this.css("visibility", "visible");
        };
    })(jQuery);




    var obj = [];
    var components = {
        file: {
            name: '',
            size: 0,
            mimeType: ''
        },
        components: []
    };

    var socket = io.connect('/prepareadvisory');

    var bar1 = new ldBar("#myItem1");
    //var bar2 = document.getElementById('myItem1').ldBar;

    var id;


    socket.on('connected', function (data) {
        console.log(data);
        id = data.id;
        socket.emit('tasks', {});
        socket.emit('get_solutions', {});
        socket.emit('get_all_configlists', {});
        socket.emit('get_dbinfo', {});
    });

    socket.on('solutions', function (data) { //populate solutions dropdown list

        if (data) {
            console.log(data);
            $("#solution").append("<option value=''>Select One …</option>");
            Object.keys(data).forEach((key) => {
                $("#solution").append("<option size=25 value='" + data[key].key + "'>" + data[key].key + "</option>");
            });
        }
        // attaching event listeners to process generate document requests;

        $(document).ready(function () {
            solutions = document.getElementById("solution");
            document.getElementById("solution").addEventListener("change", function () {

                solutions.options[solutions.options.selectedIndex].selected = true;
                socket.emit('get_components', $("#solution option:selected").attr("value"));

                return false;

            });
        });
    })

    socket.on('components', function (data) {
        console.log(data);
        if (data) {
            removeOptions(document.getElementById("application_type"))
            Object.keys(data).forEach((key) => {
                $("#application_type").append("<option size=25 value='" + data[key].key[1] + "'>" + data[key].key[1] + "</option>");
            });

            // since we add options dynamically we need to set selected flag on change event
            $(document).ready(function () {
                applications = document.getElementById("application_type");
                document.getElementById("application_type").addEventListener("change", function () {

                    applications.options[applications.options.selectedIndex].selected = true;
                    return false;

                });
            });
        }
    })

    socket.on('all_configlists', function (data) {
        console.log(data);
        if (data) {
            removeOptions(document.getElementById("configlist"));
            $("#configlist").append("<option value=''>Select One …</option>");
            Object.keys(data).forEach((key) => {
                $("#configlist").append("<option size=25 id='#" + data[key].id + "' value='" + data[key].id + "'>" + data[key].doc.cfglist_name + "</option>");
                //$('#'+data[key].id).data("components",data[key].doc.components);
            });

            // since we add options dynamically we need to set selected flag on change event
            $(document).ready(function () {
                configlist = document.getElementById("configlist");
                document.getElementById("configlist").addEventListener("change", function () {

                    configlist.options[configlist.options.selectedIndex].selected = true;

                    var doc_id = configlist.options[configlist.options.selectedIndex].value;
                    submitData('get_configlist', doc_id);
                    $('.nav-tabs a#conflist_tab').tab('show');
                })
                return false;

            });
        }
    })

    socket.on('configlist', function (data) {
        console.log('configlist received:' + JSON.stringify(data));
        if (data) {
            //removeOptions(document.getElementById("configlist"))

            // since we add options dynamically we need to set selected flag on change event
            var components = data.components;

            configlist_detach();

            add_config_list_item(components);

            $('.nav-tabs a[href="#conflist_tab"]').tab('show');
            // initialize config list buttons
            $(document).ready(function () {
                init_config_lists_caption(data);
                init_config_lists();

                // TODO:
                // add listeners for editable cells change events
                editable_setlisteners()
            });

            $("#config_list").visible();

        }
    })

    function editable_setlisteners() {
        $('body').on('focus', '[contenteditable]', function () {
            var $this = $(this);
            $this.data('before', $this.html());
            return $this;
        }).on('blur keyup paste input', '[contenteditable]', function () {
            var $this = $(this);
            if ($this.data('before') !== $this.html()) {
                $this.data('before', $this.html());
                $this.trigger('cl_editable_change');
            }
            return $this;
        }).on('cl_editable_change', function () {
            var $this = $(this)
            console.log($this + " triggered cl_editable_change")
            button_enable($("#update-btn"))
        });
    }

    function add_config_list_item(arr) {
        arr.forEach(function (item, i) {
            var header = []

            var head = $("#config_list_t").find('th:not(:empty)')
            if (head.length == 0) {
                Object.keys(item).forEach((key) => {
                    header.push(key);
                });

                add_header_to_configlist(header);
                console.log("config list header is created");

            }
            var row = []
            Object.values(item).forEach((value) => {
                row.push(value);
            })
            add_row_to_configlist(row);
            console.log("config list rows are added");
        })
    }


    socket.on('statdata', function (data) {
        console.log(data);
        if (data) {

            $("#stat_data").empty();

            Object.keys(data).forEach((key) => {
                if (key === 'file' || key === 'error' || key == 'table') // 
                    $("#stat_data").append(data[key]);
            })

            // placeholder
            $(document).ready(function () {

            });

            $("#stat_data").visible();

        }
    })

    socket.on('progress', function (data) {
        console.log(data.percents);
        bar1.set(data.percents);
    })

    socket.on('result', function (data) {
        console.log(data);
        $("#generate").visible();
        $("#div_result #resultsTable").empty();

        // remove all hidden inputs
        var fields = $("#form_generate :input").serializeArray();
        $.each(fields, function (i, field) {
            $("input[name='" + field.value + "']").remove();
        });

        // clearing the cache
        obj = [];

        // saving object for postprocesing in cache
        if (data.parsed_obj) {
            obj[data._id] = data.parsed_obj;
            $("#generate").append("<input type='hidden' name='" + data._id + "' value='" + data._id + "' />");
        }

        Object.keys(data).forEach((key) => {
            if (key === 'file' || key === 'error' || key == 'table') // 
                $("#div_result #result").append(data[key]);
        })



        $('.tableresultheader').click(function () {
            $header = $(this);
            $content = $header.next();
            $content.slideToggle(500, function () {
                $header.text(function () {
                    return $content.is(':visible') ? 'Collapse' : 'Expand';
                });
            });
        });

        // attaching event listeners to process generate document requests;

        $(document).ready(function () {
            document.getElementById("docx").addEventListener("click", function () {

                var values = {};
                var fields = $("#form_generate :input").serializeArray();
                $.each(fields, function (i, field) {
                    values = obj[field.value];
                });

                var generator = new Generator();

                generator.generateDocx("/assets/js/input.docx", values);

                return false;

            });
        });

        $('.nav-tabs a[href="#result_tab"]').tab('show');


    })

    socket.on('console', function (data) {
        console.log(data);
        //$("#div_result").empty();
        Object.keys(data).forEach((key) => { $("#div_result #console").append(data[key]); })


    })

    socket.on('errors', function (data) {
        console.log(data);
        //$("#div_result").empty();
        lotsoferrors(data);


    })

    socket.on('dbinfo', function (data) {
        console.log(data);
        $("#dbinfo").empty();
        $("#dbinfo").append(data.table);
        $("#dbinfo").visible();




    })

    socket.on('done', function (data) {
        done();
    })

    socket.on('validation', function (data) {
        console.log(data);
        // $(':submit').attr('disabled', 'disabled');
        if (data.submitted) {
            $("#div_result #console").append(data.reason);
        } else {
            lotsoferrors(data.reason)
            done();
        }
    })

    socket.on('tasks', function (data) {
        console.log('Got list of tasks');
        if (data instanceof Array) {
            data.forEach((item) => {
                $('#tasks').append(
                    '<tr id="' + item._id + '">'
                    + '<td><input type="checkbox" id="' + item._id + '" /></td>'
                    + '<td>' + item.time.toString() + '</td>'
                    + '<td>' + item.input.toString() + '</td>'
                    + '<td>' + item.link.toString() + '</td>'
                    + '</tr>'
                )
            })
            $(document).ready(function () {
                $(".getresult").click(function () {
                    var id = this.id;
                    submitData('getresults', { 'id': id })
                });
            });
        }
    })

    socket.on('deleted', function (data) {
        console.log('Record deleted: ', data.id);
        $('tr#' + data.id).remove();
    })

    socket.on('saved_configlist', function (data) {
        console.log('Configlist saved: ', data);
        $("#configlist").append("<option size=25 value='" + data._id + "'>" + data.cfglist_name + "</option>");
        $(document).ready(function () {
            init_config_lists_caption(data);
            button_enable($("#delete-btn"));
        })
    })

    socket.on('updated_configlist', function (data) {
        console.log('Configlist updated: ', data);

        $(document).ready(function () {
            $("#configlist_updated").text("");
            $("#configlist_updated").append(data.updated);
        })
    })

    socket.on('deleted_configlist', function (data) {
        console.log('Configlist deleted: ', data);
        $("#configlist option[value='" + data.id + "']").remove();
        $(document).ready(function () {
            configlist_detach();
            init_config_lists_clear_text();
        })
    })

    $("#form_dbs").submit(function () {
        try {
            var args = {};
            var errors = []
            args.dbtype = $("select option:selected").attr("value");

            args.host = (checkField($("#host").val(), 100)) ? $("#host").val() : errors.push('Host can\'t be longer than 100');
            args.dbname = (checkField($("#dbname").val(), 100)) ? $("#dbname").val() : errors.push('DB name can\t be longer than 100');
            args.user = (checkField($("#user").val(), 100)) ? $("#user").val() : errors.push('User can\'t be longer than 100');
            args.pass = (checkField($("#pass").val(), 25)) ? $("#pass").val() : errors.push('Password can\'t be longer than 25');
            args.genfile = $('#genfile').is(':checked') ? true : false;
            args.save = $('#save_task').is(':checked') ? true : false;

            var res = {};
            res.form = 'form_dbs';
            res.args = args;
            if (!lotsoferrors(errors))
                submitData('my other event', res);


            //alert(args);;

        } catch (e) {
            console.log(e.stack);
        } finally {
            return false; // to avoid page reload
        } // to avoid page reload

    })

    function get_selected_components() {
        var result = {
            args: {}, errors: []
        };

        result.args.solution = $("#solution option:selected").attr("value");
        result.args.application_type = $("#application_type option:selected").attr("value");
        result.args.os_type = $("#os_type option:selected").attr("value");
        result.args.release = (checkField($("#release").val(), 10)) ? $("#release").val() : result.errors.push('Release can\'t be longer than 10');
        result.args.genfile = $('#genfile').is(':checked') ? true : false;
        result.args.save = $('#save_task').is(':checked') ? true : false;
        return result;
    }

    $("#form_comp").submit(function () {
        try {

            var component = get_selected_components();

            var res = {}
            res.form = 'form_comp';
            res.args = component.args;
            if (!lotsoferrors(component.errors)) {
                submitData('search', res);

            }

        } catch (e) {
            console.log(e.stack);
        } finally {
            return false; // to avoid page reload
        } // to avoid page reload

    })

    $("#form_tasks").submit(function () {
        try {
            var args = {};
            var errors = []
            args = checkedValues("#form_tasks input:checkbox:checked");



            submitData('deleteresults', args);
            //alert(args);;

        } catch (e) {
            console.log(e.stack);
        } finally {
            return false; // to avoid page reload
        } // to avoid page reload

    })

    $("#form_csv").submit(submit_csv())

    function submit_csv() {
        try {
            var errors = [];
            var res = {};
            var genfile = $('#genfile').is(':checked') ? true : false;
            var save = $('#save_task').is(':checked') ? true : false;
            var create_config_list = $('#hasHeader').is(':checked') ? true : false;

            if (components.length == 0) {
                errors.push('components list is empty');
            }


            if (!lotsoferrors(errors)) {
                res.form = "form_csv";
                res.args = components.file;
                res.components = components.components;
                res.genfile = genfile;
                res.save = save;

                submitData('components', res);

            }
        } catch (e) {
            console.log(e.stack);
        } finally {
            return false;
        }
    }


    $("#form_admin").submit(function () {
        try {
            var args = {};
            args.databases = $("#databases option:selected").attr("value");

            submitData('recreate_view', args);
            //alert(args);;

        } catch (e) {
            console.log(e.stack);
        } finally {
            return false; // to avoid page reload
        } // to avoid page reload

    })

    $("#form_generate").submit(function () {
        try {

        } catch (e) {
            console.log(e.stack);
        } finally {
            return false; // to avoid page reload
        } // to avoid page reload
    })

    $("#addto-cs-event").click(function () {

        var result = get_selected_components();

        var data = [];//get_table_data();

        if (!lotsoferrors(result.errors)) {
            data.push(result.args);

            add_config_list_item(data)

            $(document).ready(function () {
                init_config_lists();
                button_disable($("#delete-btn"), {
                    eval: function () {
                        return ($("#configlist_docid").text().length > 0) ? false : true;
                    }
                });

                button_enable($("#update-btn"), {
                    eval: function () {
                        return ($("#configlist_docid").text().length > 0) ? true : false;
                    }

                });
                editable_setlisteners()


            });

            $("#config_list").visible();
            $('.nav-tabs a[href="#conflist_tab"]').tab('show');

        }
    })

    function done() {
        $('.active_submitter').removeAttr('disabled');
        $(':submit').removeClass('active_submitter');
        $('div #myItem1').invisible();
    }

    function submitData(channel, data) {
        console.log("Sending data to /" + channel + ", " + JSON.stringify(data));
        socket.emit(channel, data);
        $('div #myItem1').visible();
    }


    // function to check length of field content. It compares to desired max length of string and min length of string.
    // in case min length is not defind it compares against 0;

    var checkField = function (text, maxcondition, mincondition) {
        if (!mincondition) {
            var mincondition = 1;
        }

        return (text.length > maxcondition || text.length < mincondition) ? false : true;

    }

    var lotsoferrors = function (errors) {
        var err;
        if (errors instanceof Array) {
            err = errors;
        } else {// object kv pairs
            err = [];
            Object.keys(errors).forEach((k) => {

                err.push('<span class="error">' + k + ':</span> ' + errors[k]);
            })

        }
        if (err.length > 0) {
            $("#form_errors").empty();

            $("#form_errors").append('<div id="errors"><h3>Error!</h3><span onclick="this.parentElement.style.display=\'none\'"  class="w3-button w3-display-topright">X</span></div>');
            var s;
            err.forEach((val) => { $("#errors").append(val + '<br/>') });
            return true;

        } else {
            $("#errors").remove();
            return false;
        }
    }

    var checkedValues = function (name) {
        return $(name).map(function () {
            return this.id;
        }).get();
    }

    function openTab(evt, tabName) {
        var i;
        var x = document.getElementsByClassName("tab");
        for (i = 0; i < x.length; i++) {
            x[i].style.display = "none";
        }

        tablinks = document.getElementsByClassName("tablink");
        for (i = 0; i < x.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" w3-red", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " w3-red";
    }

    /* Generate DOCX from template */

    var Generator = function () { };

    Generator.prototype.generateDocx = function (url, obj) {
        this.loadFile(url, obj, this.createDocx)
    }

    Generator.prototype.loadFile = function (url, obj, callback) {

        var self = this;


        self._obj = obj;
        self.url = url;

        JSZipUtils.getBinaryContent(url, function (error, content) {
            if (error) { throw error };
            var zip = new JSZip(content);
            var doc = new Docxtemplater().loadZip(zip)
            doc.setData(self._obj);

            try {
                // render the document (replace all occurences of {first_name} by John, {last_name} by Doe, ...)
                doc.render()
            }
            catch (error) {
                var e = {
                    message: error.message,
                    name: error.name,
                    stack: error.stack,
                    properties: error.properties,
                }
                console.log(JSON.stringify({ error: e }));
                // The error thrown here contains additional information when logged with JSON.stringify (it contains a property object).
                throw error;
            }

            var out = doc.getZip().generate({
                type: "blob",
                mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            }) //Output the document using Data-URI
            saveAs(out, "output.docx")
        });
    }


    Generator.prototype.createDocx = function (error, content) {
        if (error) { throw error };
        var zip = new JSZip(content);
        var doc = new Docxtemplater().loadZip(zip)
        doc.setData(this._obj);

        try {
            // render the document (replace all occurences of {first_name} by John, {last_name} by Doe, ...)
            doc.render()
        }
        catch (error) {
            var e = {
                message: error.message,
                name: error.name,
                stack: error.stack,
                properties: error.properties,
            }
            console.log(JSON.stringify({ error: e }));
            // The error thrown here contains additional information when logged with JSON.stringify (it contains a property object).
            throw error;
        }

        var out = doc.getZip().generate({
            type: "blob",
            mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        }) //Output the document using Data-URI
        saveAs(out, "output.docx")
    }

    function removeOptions(selectbox) {
        var i;
        for (i = selectbox.options.length - 1; i >= 0; i--) {
            selectbox.remove(i);
        }
    }

    function handleFiles(event) {
        var file = event.target.files[0];
        components.file.name = file.name;
        components.file.size = file.size;
        components.file.mimeType = file.mimeType;
        components.components = [];

        var reader = new LineReader();

        var hasHeader = $('#hasHeader').is(':checked') ? true : false;
        var header = [];


        reader.on('line', function (line, next) {
            // Do something with line....

            if (header.length == 0) {
                header = line.split(',');
                add_header_to_configlist(header);
            } else {

                var array = line.split(',');

                add_row_to_configlist(array);

                var obj = {};
                for (var i = 0; i < array.length; i++) {
                    obj[header[i]] = "" + array[i] + "";
                }
                //components.components.push(obj);

            }


            next(); // Call next to resume...
        });

        reader.on('end', function (evt) {
            console.log(components);

            // initialize config list buttons
            $("#configlist_name").text('');
            $("#configlist_docid").text('');
            $("#configlist_revid").text('');
            $("#configlist_time").text('');
            $("#configlist_updated").text('');

            $(document).ready(function () {
                init_config_lists();
                button_disable($("#delete-btn"));
                editable_setlisteners()


            });

            $("#config_list").visible();
            $('.nav-tabs a[href="#conflist_tab"]').tab('show');

        })

        reader.read(file);
    }

    function add_row_to_configlist(data) {
        console.log('Got item for config list');
        if (data instanceof Array) {
            var row = '';
            data.forEach((item) => {

                row = row + '<td contenteditable="true">' + normalizeConfigListItem(item) + '</td>';

            })
            $('#config_list_t').append('<tr>' + row
                + '<td><span class="table-remove glyphicon glyphicon-remove"></span></td>'
                + '<td><span class="table-up glyphicon glyphicon-arrow-up"></span>'
                + '<span class="table-down glyphicon glyphicon-arrow-down"></span>'
                + '</td></tr>');


        }
    }

    function normalizeConfigListItem(item) {//remove " if the string is wrapped into double qoutes
        if (item instanceof String) {
            if (item.startsWith('"') && item.endsWith('"')) {
                return item.substring(1, item.length - 1);
            }
        }
        return item;
    }
    function configlist_detach() {
        $('#config_list').detach();
        $('#export_div').detach();
        console.log("export_div detached");
    }
    function add_header_to_configlist(data) {
        console.log('Got header item for config list');

        configlist_detach();

        $('#configlist_container').append(
            '<div id="config_list" class="table-editable" style="visibility: hidden">'
            + '<span class="table-add glyphicon glyphicon-plus"></span>'
            + '<table id="config_list_t" class="table">'
            + '<tr id="config_list_t_header">'
            + '</tr>'
            + '<!-- This is our clonable table line -->'
            + '</table>'
            + '</div>'
        );
        if (data instanceof Array) {
            var row = '';
            data.forEach((item) => {

                row = row + '<th>' + normalizeConfigListItem(item) + '</th>';

            })
            $('#config_list_t_header').append(row + '<th></th><th></th>');

            $("#configlist_container").append('<div id="export_div">'
                + '<button id="run-btn" class="btn btn-primary">Run</button>'
                + '<button id="save-btn" class="btn btn-primary">Save as</button>'
                + '<button id="update-btn" class="btn btn-primary" disabled="true">Update</button>'
                + '<button id="delete-btn" class="btn btn-primary">Delete</button>'
                + '<button id="reset-btn" class="btn btn-primary">Reset</button><p id="export"></p></div>');

            /*
            $(document).ready(function () {
               init_config_lists();
            });
            */
        }
    }

    // Configuration lists table management script 

    function init_config_lists_clear_text() {

        $("#configlist_name").text('');
        $("#configlist_docid").text('');
        $("#configlist_revid").text('');
        $("#configlist_time").text('');
        $("#configlist_updated").text('');
    }


    function init_config_lists_caption(data) {

        init_config_lists_clear_text();

        $("#configlist_name").append(data.cfglist_name);
        $("#configlist_docid").append(data._id);
        $("#configlist_revid").append(data._rev);
        $("#configlist_time").append(data.time);
        $("#configlist_updated").append(data.updated);
    }

    function button_enable(elem, condition) {
        console.log(elem + " is enabled")
        if (condition) {
            if (condition.eval()) {
                elem.prop("disabled", false)
            }
            return
        }
        elem.prop("disabled", false);
    }

    // condition is an object where eval is a user defined function to evaluate true/false condition to disable an object

    function button_disable(elem, condition) {
        console.log(elem + " is disabled")
        if (condition) {
            if (condition.eval()) {
                elem.prop("disabled", true)
            }
            return
        }

        elem.prop("disabled", true)
    }

    function get_table_data() {
        var $TABLE = $('#config_list_t');

        var $rows = $TABLE.find('tr:not(:hidden)');
        var headers = [];
        var data = [];

        // Get the headers (add special header logic here)

        if ($rows.length > 1) {
            $($rows.shift()).find('th:not(:empty)').each(function () {
                headers.push($(this).text().toUpperCase());
            });

            // Turn all existing rows into a loopable array
            $rows.each(function () {
                var $td = $(this).find('td');
                var h = {};

                // Use the headers from earlier to name our hash keys
                headers.forEach(function (header, i) {
                    h[header] = $td.eq(i).text();
                });

                data.push(h);
            });
        }

        return data;

    }

    function init_config_lists() {

        console.log('init_config_lists is entered')
        var $TABLE = $('#config_list_t');
        var $BTN = $('#run-btn');
        var $BTN_SAVE = $('#save-btn');
        var $BTN_UPDATE = $('#update-btn');
        var $BTN_DELETE = $('#delete-btn');
        var $BTN_RESET = $('#reset-btn');
        var $EXPORT = $('#export');

        $('.table-add').click(function () {
            var $clone = $TABLE.find('tr.hide').clone(true).removeClass('hide table-line');
            $TABLE.find('table').append($clone);
            button_enable($BTN_UPDATE);
        });

        $('.table-remove').click(function () {
            $(this).parents('tr').detach();
            button_enable($BTN_UPDATE);
        });

        $('.table-up').click(function () {
            var $row = $(this).parents('tr');
            if ($row.index() === 1) return; // Don't go above the header
            $row.prev().before($row.get(0));
            button_enable($BTN_UPDATE);
        });

        $('.table-down').click(function () {
            var $row = $(this).parents('tr');
            $row.next().after($row.get(0));
            button_enable($BTN_UPDATE);
        });

        // A few jQuery helpers for exporting only
        jQuery.fn.pop = [].pop;
        jQuery.fn.shift = [].shift;



        $BTN.click(function () {

            console.log('Configuration list is to be sent to backend for evaluation')

            var data = get_table_data();

            var cl = {
                cfglist_name: $("#configlist_name").text(),
                _id: $("#configlist_docid").text(),
                _rev: $("#configlist_revid").text(),
                time: $("#configlist_time").text()
            }

            if (cl._id.length > 0) {
                components.file = cl;
            }


            // Output the result
            console.log(data);
            components.components = data;
            $(this).addClass("active_submitter");
            $('.nav_tab a#result_tab').tab('show');
            submit_csv();

        });

        $BTN_SAVE.click(function () {

            console.log('Saving config list');
            var data = get_table_data();
            $('#configlist_modal').data("components", data)
            $('#configlist_modal').modal('show');

        })

        $BTN_UPDATE.click(function () {

            var cl = {
                cfglist_name: $("#configlist_name").text(),
                _id: $("#configlist_docid").text(),
                _rev: $("#configlist_revid").text(),
                time: $("#configlist_time").text()
            }

            console.log('Updating config list: ' + cl.cfglist_name + ' _id:' + cl._id + ' _rev: ' + cl._rev);
            console.log('Updating config list');
            cl.components = get_table_data();

            $('#configlist_update_modal').data("document", cl)

            $('#configlist_update_modal').modal('show');

        })

        $BTN_DELETE.click(function () {

            var cl = {
                name: $("#configlist_name"),
                id: $("#configlist_docid")
            }

            cl.name;

            console.log('Deleting config list: ' + cl.name.text() + ' _id:' + cl.id.text());

            $('#configlist_delete_modal').data("id", cl.id.text())
            $('#configlist_delete_modal').modal('show');

        })

        $BTN_RESET.click(function () {
            if (!$("#update-btn").prop("disabled")) {
                $('#configlist_forced_update_modal').modal('show');

            } else {
                $("#reset-event").click()
            }
        })
    }

    // Handling of config list modal  buttons
    $('#save-event').on(
        'click',
        function (evt) {
            console.log('Saving of config list has been triggered');
            var errors = [];
            var args = {};

            var modal_data = $('#configlist_modal').data();
            var cfglist_name = $("#configlist-name").val();

            args.cfglist_name = (checkField($("#configlist-name").val(), 20)) ? $("#configlist-name").val() : errors.push('Configuration list name is too long, can\'t be longer than 20');
            args.components = modal_data.components;

            if (!lotsoferrors(errors)) {

                submitData('save_configlist', args);
                $('#save-btn').addClass("active_submitter");
            }

            $('#configlist_modal').modal('hide');


        }
    );

    $("#update-event").on(
        'click',
        function (evt) {
            console.log('Update of config list has been triggered');

            var data = $('#configlist_update_modal').data();

            submitData('update_configlist', data.document);
            $('#configlist_update_modal').modal('hide');
            $('#update-btn').addClass("active_submitter");
        }
    )

    $("#delete-event").on(
        'click',
        function (evt) {
            console.log('Deleting of config list has been triggered');

            var id = $('#configlist_delete_modal').data('id');
            submitData('delete_configlist', id);
            $('#configlist_delete_modal').modal('hide');
            $('#delete-btn').addClass("active_submitter");
        }
    )

    $("#forced-update-event").on('click',
        function (evt) {
            var queue = new function_pipeline();
            console.log('Forced update of config list has been triggered');
            $('#configlist_forced_update_modal').modal('hide');
            if ($("#configlist_docid").text.length > 0) {
                queue.push(function () { $('#save-btn').click() });
            } else {
                queue.push(function () { $('#update-btn').click() });
            }
            queue.push(function () { $('#reset-event').click() });

            queue.execute();



        })
    $("#reset-event").on('click',
        function (evt) {
            init_config_lists_clear_text();
            configlist_detach();
        })

    $("#get-statdata-event").on('click',
        function (evt) {
            submitData('get_rn_statdata', {});
        })



    // Scripts to handle TABs

    var function_pipeline = function () {
        this.queue = []
    }

    function_pipeline.prototype.push = function (arg) {
        this.queue.push(arg)
    }

    function_pipeline.prototype.execute = function () {
        while (this.queue.length) {
            this.queue.shift().call();
        }
    }


    $('.nav-tabs a').click(function (e) {
        e.preventDefault();
        $(this).tab('show');
    });

</script>